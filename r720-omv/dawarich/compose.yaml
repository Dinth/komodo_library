services:
  dawarich-valkey:
    container_name: dawarich-valkey
    image: docker.io/valkey/valkey:8.1.3-alpine
    command: ['valkey-server','--save','30','1','--loglevel','warning']
    restart: unless-stopped
    networks:
      - dawarich
    volumes:
      - /opt/docker/dawarich/valkey-data:/data
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
      - CHOWN
    cap_drop:
      - ALL
    labels:
      wud.display.name: "Dawarich - Valkey"
      wud.display.icon: "sh-dawarich"
      wud.watch: "true"
      wud.tag.include: '^v\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/valkey-io/valkey/releases/tag/$${major}.$${minor}.$${patch}'
    healthcheck: 
      test: '[ $$(valkey-cli ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
  dawarich-postgis:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
#    cap_drop:
#      - ALL
    command: ['postgres']
    container_name: dawarich-postgis
    entrypoint: ['docker-entrypoint.sh']
    environment:
      POSTGRES_USER: "dawarich"
      PGUSER: "dawarich"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    hostname: dawarich-postgis
    image: postgis/postgis:17-3.6-alpine
    ipc: private
    healthcheck:
      test: [ 'CMD-SHELL','pg_isready','-U','dawarich','-d','dawarich' ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^17-\d+\.\d+-alpine$$'
      wud.display.name: "Dawarich - Postgis"
      wud.display.icon: "sh-dawarich"  
    networks:
      - dawarich
    restart: unless-stopped
    volumes:
      - /opt/docker/dawarich/postgis_data:/var/lib/postgresql/data

  dawarich-sidekiq:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['sidekiq']
    container_name: dawarich-sidekiq
    entrypoint: 'sidekiq-entrypoint.sh'
    environment:
      DATABASE_HOST: "dawarich-postgis"
      DATABASE_USERNAME: "dawarich"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
      DATABASE_NAME: "dawarich"
      APPLICATION_HOST: "localhost"
      APPLICATION_HOSTS: "localhost"
      DISTANCE_UNIT: "km"
      REDIS_URL: "redis://dawarich-valkey:6379"
      BACKGROUND_PROCESSING_CONCURRENCY: "10"
      APPLICATION_PROTOCOL: "http"
      PHOTON_API_USE_HTTPS: "true"
      REVERSE_GEOCODING_ENABLED: "true"
      PHOTON_API_HOST: "photon.dawarich.app"
      PHOTON_API_KEY: "${PHOTON_API_KEY}"
      SELF_HOSTED: "true"
    expose:
      - 3000/tcp
    hostname: dawarich-sidekiq
    image: freikin/dawarich:0.32.0
    ipc: private
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f sidekiq" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich-postgis:
        condition: service_healthy
        restart: true
      dawarich-valkey:
        condition: service_healthy
        restart: true
#      dawarich:
#        condition: service_healthy
#        restart: true
    labels:
      wud.display.icon: "sh:dawarich"
      wud.display.name: "Dawarich Sidekiq"
      wud.link.template: 'https://github.com/Freika/dawarich/releases/v$${major}.$${minor}.$${patch}'
      wud.tag.include: '^\d+\.\d+\.\d+$$'
      wud.watch: "true"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - dawarich
    restart: unless-stopped
    volumes:
      - /opt/docker/dawarich/dawarich_gem_cache_sidekiq:/usr/local/bundle/gems_sidekiq
      - /opt/docker/dawarich/dawarich_public:/var/app/public
      - /opt/docker/dawarich/dawarich_watched:/var/app/tmp/imports/watched
      - /opt/docker/dawarich/dawarich_storage:/var/app/storage
  dawarich:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
#    cap_drop:
#      - ALL
    command: ['bin/rails','server','-p','3000','-b','::']
    container_name: dawarich
    entrypoint: 'web-entrypoint.sh'
    environment:
      DATABASE_HOST: "dawarich-postgis"
      DATABASE_USERNAME: "dawarich"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
      DATABASE_NAME: "dawarich"
      APPLICATION_HOST: "localhost"
      APPLICATION_HOSTS: "localhost,traces.${DOMAIN_NAME}"
      DISTANCE_UNIT: "km"
      REDIS_URL: "redis://dawarich-valkey:6379"
      MIN_MINUTES_SPENT_IN_CITY: "120"
      TIME_ZONE: "${TZ}"
      PHOTON_API_USE_HTTP: "true"
      APPLICATION_PROTOCOL: "http"
      REVERSE_GEOCODING_ENABLED: "true"
      PHOTON_API_HOST: "photon.dawarich.app"
      PHOTON_API_KEY: "${PHOTON_API_KEY}"
      SELF_HOSTED: "true"
    hostname: dawarich
    image: freikin/dawarich:0.32.0
    ipc: private
#    healthcheck:
#      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
#      interval: 10s
#      retries: 30
#      start_period: 30s
#      timeout: 10s
    depends_on:
      dawarich-postgis:
        condition: service_healthy
        restart: true
      dawarich-valkey:
        condition: service_healthy
        restart: true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - dawarich
      - traefik
    ports:
      - 4745:3000/tcp
    labels:
      traefik.enable: "true"
      traefik.http.routers.dawarich.entrypoints: websecure
      traefik.http.routers.dawarich.rule: Host(`traces.${DOMAIN_NAME}`)
      traefik.http.routers.dawarich.tls: "true"
      traefik.http.routers.dawarich.tls.certresolver: letsencrypt
      traefik.http.routers.dawarich.tls.domains[0].main: "${DOMAIN_NAME}"
      traefik.http.routers.dawarich.tls.domains[0].sans: "*.${DOMAIN_NAME}"
      traefik.http.routers.dawarich.middlewares: "secHeaders@file"
      traefik.http.services.dawarich.loadbalancer.server.port: "3000"
      wud.display.icon: "sh:dawarich"
      wud.display.name: "Dawarich"
      wud.link.template: 'https://github.com/Freika/dawarich/releases/v$${major}.$${minor}.$${patch}'
      wud.tag.include: '^\d+\.\d+\.\d+$$'
      wud.watch: "true"
    restart: unless-stopped
    volumes:
      - /opt/docker/dawarich/dawarich_watched:/var/app/tmp/imports/watched
      - /opt/docker/dawarich/dawarich_gem_cache_app:/usr/local/bundle/gems_app
      - /opt/docker/dawarich/dawarich_public:/var/app/public
      - /opt/docker/dawarich/dawarich_storage:/var/app/storage
      - /opt/docker/dawarich/dawarich_sqlite_data:/dawarich_sqlite_data
networks:
  dawarich:
    name: dawarich
    driver: bridge
    external: false
  traefik:
    external: true