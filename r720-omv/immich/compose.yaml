services:
  immich-server:
    container_name: immich-server
    image: ghcr.io/immich-app/immich-server:v1.140.1
    user: "${MEDIA_PUID}:${MEDIA_PGID}"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
    environment:
      REDIS_HOSTNAME: "immich-redis"
      REDIS_PORT: "6379"
      DB_HOSTNAME: "immich-postgres"
      DB_PORT: "5432"
      DB_USERNAME: "immich"
      DB_PASSWORD: "${IMMICH_POSTGRES_PASS}"
      DB_DATABASE_NAME: "immich"
    ports:
      - '2283:2283'
    depends_on:
      immich-valkey:
        condition: service_healthy
      immich-postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      disable: false
    labels:
      traefik.enable: "true"
      traefik.http.routers.immich.rule: "Host(`photos.${DOMAIN_NAME}`)"
      traefik.http.routers.immich.entrypoints: "websecure"
      traefik.http.routers.immich.tls: "true"
      traefik.http.routers.immich.tls.certresolver: "letsencrypt"
      traefik.http.routers.immich.tls.domains[0].main: "${DOMAIN_NAME}"
      traefik.http.routers.immich.tls.domains[0].sans: "*.${DOMAIN_NAME}"
      traefik.http.routers.immich.middlewares: "secHeaders@file"
      traefik.http.services.immich.loadbalancer.server.port: "2283"
      wud.watch: "true"
      wud.watch.digest: "true"
      wud.display.icon: "sh-immich"
      wud.display.name: "Immich Server"
      wud.tag.include: '^v\d+\.\d+\.\d+$$'
      wud.link.template: "https://github.com/immich-app/immich/releases/tag/v$${major}.$${minor}.$${patch}"
      homepage.group: "Media"
      homepage.name: "Immich"
      homepage.icon: "sm-immich"
      homepage.href: "https://photos.${DOMAIN_NAME}"
      homepage.description: "Photo galery"
      homepage.widget.type: "immich"
      homepage.widget.url: "https://photos.${DOMAIN_NAME}"
      homepage.widget.key: "${HOMEPAGE_IMMICH_KEY}"
      homepage.widget.version: "2"
      homepage.widget.fields: "['users' ,'photos', 'videos', 'storage']"
    volumes:
      - /Data/Photos:/usr/src/app/upload/library
      - /opt/docker/immich/immich_backups:/usr/src/app/upload/backups
      - /Data/IT/immich_encoded-video:/usr/src/app/upload/encoded-video
      - /opt/docker/immich/immich_profile:/usr/src/app/upload/profile
      - /opt/docker/immich/immich_thumbs:/usr/src/app/upload/thumbs
      - /Data/IT/immich_upload:/usr/src/app/upload/upload
      - /etc/localtime:/etc/localtime:ro
    networks:
      - immich
      - traefik

  immich-machine-learning:
    container_name: immich-machine-learning
    image: ghcr.io/immich-app/immich-machine-learning:v1.140.1-cuda
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
    labels:
      wud.watch: "true"
      wud.display.icon: "sh-immich"
      wud.display.name: "Immich Machine Learning"
      wud.tag.include: '^v\d+\.\d+\.\d+\-cuda$$'
      wud.link.template: "https://github.com/immich-app/immich/releases/tag/v$${major}.$${minor}.$${patch}"
    volumes:
      - /opt/docker/immich/immich_model-cache:/cache
    restart: unless-stopped
    healthcheck:
      disable: false
    networks:
      - immich

  immich-valkey:
    container_name: immich-valkey
    image: docker.io/valkey/valkey:8.1.3-alpine
    ipc: private
    command: ['valkey-server','--save','30','1','--loglevel','warning']
    restart: unless-stopped
    networks:
      - immich
    volumes:
      - /opt/docker/yamtrack/valkey-data:/data
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
      - CHOWN
    cap_drop:
      - ALL
    labels:
      wud.display.name: "Yamtrack - Valkey"
      wud.display.icon: "sh-searxng"
      wud.watch: "true"
      wud.tag.include: '^v\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/valkey-io/valkey/releases/tag/$${major}.$${minor}.$${patch}'
    healthcheck: 
      test: '[ $$(valkey-cli ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"


  immich-postgres:
    container_name: immich-postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.3.0
    ipc: private
    cap_add:
      - CHOWN
      - FOWNER
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: pg_isready -q -t 2 -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 20s
      timeout: 30s
      interval: 10s
      retries: 5
    labels:
      wud.watch: "true"
      wud.tag.include: '^14-vectorchord\d+\.\d+\.\d+\-pgvectors\d+\.\d+\.\d+$$'
      wud.display.name: "Immich - Postgres"
      wud.display.icon: "sh-immich"  
    deploy:
      resources:
        limits:
          memory: 200m
        reservations:
          memory: 50m
    environment:
      POSTGRES_PASSWORD: ${IMMICH_POSTGRES_PASS}
      POSTGRES_USER: immich
      POSTGRES_DB: immich
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - /opt/docker/immich/immich_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - immich
      - adminer

networks:
  immich:
    name: immich
    driver: bridge
    external: false
  traefik:
    external: true
  adminer:
    external: true