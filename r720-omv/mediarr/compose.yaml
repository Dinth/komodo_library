services:
  gluetun:
    image: qmcgaw/gluetun:v3.40.0
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    ipc: private
    environment:
      TZ: "${TZ}"
      VPN_SERVICE_PROVIDER: "protonvpn"
      VPN_TYPE: "wireguard"
      WIREGUARD_PRIVATE_KEY: "${WIREGUARD_PRIVATE_KEY}"
      PORT_FORWARD_ONLY: "yes"
      VPN_PORT_FORWARDING: "yes"
    healthcheck:
      interval: 10s
      timeout: 60s
      start_period: 10s
      retries: 3
      test: [ "CMD", "/gluetun-entrypoint", "healthcheck" ]
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/qdm12/gluetun/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Gluetun"
      wud.display.icon: "sh-gluetun"
   
    volumes:
      - /opt/docker/mediarr/gluetun_data:/gluetun
    restart: unless-stopped
    networks:
      - mediarr
  qbittorrentvpn:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_ADMIN
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['/bin/bash','/usr/local/bin/init.sh']
    container_name: qbittorrentvpn
    devices:
      - /dev/net/tun
    entrypoint:
      - /usr/bin/dumb-init
      - --
    environment:
      VPN_ENABLED: "1"
      LAN_NETWORK: "10.10.0.0/16"
      PUID: "1001"
      GUID: "100"
      WEBUI_PORT: "8008"
      VPN_PROV: "custom"
      NAME_SERVERS: "1.1.1.1,1.0.0.1,8.8.8.8,8.8.4.4,10.10.0.1"
      ENABLE_PRIVOXY: "no"
      VPN_USERNAME: "${VPN_USERNAME}"
      VPN_PASSWORD: "${VPN_PASSWORD}"
    hostname: qbittorrentvpn
    image: binhex/arch-qbittorrentvpn:5.1.1-1-01
    ipc: private
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+\-\d\-\d+\d$$'
      wud.link.template: 'https://github.com/qbittorrent/qBittorrent/releases/tag/release-$${major}.$${minor}.$${patch}'
      wud.display.name: "QBittorrent VPN"
      wud.display.icon: "sh-qbittorrent"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 31408:31408/tcp
      - 31408:31408/udp
      - 8008:8008/tcp
    restart: unless-stopped
    volumes:
      - /opt/docker/mediarr/qbittorrentvpn_config:/config
      - /Data/Unsorted:/data
      - /etc/localtime:/etc/localtime:ro
  jackettvpn:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_ADMIN
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['/bin/bash','/etc/openvpn/start.sh']
    container_name: jackettvpn
    devices:
      - /dev/net/tun
    environment:
      DISABLE_IPV6: "1"
      LAN_NETWORK: "10.10.0.0/16"
      HEALTH_CHECK_HOST: "8.8.8.8"
      PGID: "100"
      PUID: "1001"
      HEALTH_CHECK_AMOUNT: "300"
      VPN_ENABLED: "yes"
#      VPN_USERNAME: "${VPN_USERNAME}"
#      VPN_PASSWORD: "${VPN_PASSWORD}"
    hostname: jackettvpn
    image: dyonr/jackettvpn:latest
    ipc: private
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      homepage.group: "Media"
      homepage.name: "Jackett"
      homepage.icon: "jackett.png"
      homepage.instance.internal.href: "http://10.10.1.13:9117"
      homepage.description: "Torrent indexer"
      homepage.widget.type: "jackett"
      homepage.widget.url: "http://10.10.1.13:9117"
      homepage.widget.fields: "['configured', 'errored']"
      wud.watch: "true"
      wud.digest: "true"
      wud.display.name: "Jackett VPN"
      wud.display.icon: "sh-jackett"
    networks:
      - mediarr
    ports:
      - 9117:9117/tcp
    privileged: true
    restart: unless-stopped
    security_opt:
      - label=disable
    volumes:
      - /opt/docker/mediarr/jackettvpn_blackhole:/blackhole
      - /opt/docker/mediarr/jackettvpn_config:/config
  prowlarr:
    container_name: prowlarr
    image: docker.io/linuxserver/prowlarr:1.37.0
    restart: unless-stopped
    volumes:
      - /opt/docker/mediarr/prowlarr_config:/config
    ipc: private
    environment:
      TZ: "${TZ}"
      PUID: "${MEDIA_PUID}"
      PGID: "${MEDIA_PGID}"
    labels:
      homepage.group: Media
      homepage.name: Prowlarr
      homepage.icon: prowlarr
      homepage.href: http://10.10.1.13:9696
      homepage.siteMonitor: http://10.10.1.13:9696
      homepage.widget.type: prowlarr
      homepage.widget.url: http://10.10.1.13:9696
      homepage.widget.key: "{{HOMEPAGE_PROWLARR_API}}"
      wud.watch: "true"
      wud.link.template: 'https://github.com/fingerthief/recommendarr/releases/tag/$${major}.$${minor}.$${patch}'
      wud.display.name: "Prowlarr"
      wud.display.icon: "sh-prowlarr"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
    ports: 
      - 9696:9696
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9696 || exit 1
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
  recommendarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['sh','/start-unified.sh']
    container_name: recommendarr
    entrypoint:
      - docker-entrypoint.sh
    environment:
      PORT: "8282"
    hostname: recommendarr
    image: tannermiddleton/recommendarr:v1.4.4
    ipc: private
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/fingerthief/recommendarr/releases/tag/$${major}.$${minor}.$${patch}'
      wud.display.name: "Recommendarr"
      wud.display.icon: "sh-recommendarr"
    networks:
      - mediarr
    ports:
      - 8282:8282/tcp
    restart: unless-stopped
    volumes:
      - /opt/docker/mediarr/recommendarr_data:/app/server/data
  bazarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: bazarr
    entrypoint:
      - /init
    environment:
      TZ: "${TZ}"
      PUID: "1001"
      PGID: "100"
    hostname: bazarr
    image: linuxserver/bazarr:1.5.2
    ipc: private
    labels:
      homepage.group: "Media"
      homepage.name: "Bazarr"
      homepage.icon: "bazarr.png"
      homepage.href: "http://10.10.1.13:6767"
      homepage.description: "Subtitle downloader"
      homepage.widget.fields: "['missingEpisodes', 'missingMovies']"
      homepage.widget.type: "bazarr"
      homepage.widget.url: "http://10.10.1.13:6767"
      homepage.widget.key: "${HOMEPAGE_BAZARR_API}"
      wud.watch: "true"
      wud.tag.include: '^vhttps://github.com/morpheus65535/bazarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Bazarr"
      wud.display.icon: "sh-bazarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 6767:6767/tcp
    restart: unless-stopped
    volumes:
      - /opt/docker/mediarr/bazarr_config:/config
      - /Data/Movies:/movies
      - /Data/TVShows:/tv
  lidarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: lidarr
    entrypoint:
      - /init
    environment:
      PUID: "1001"
      PGID: "100"
      TZ: "${TZ}"
    hostname: lidarr
    image: linuxserver/lidarr:2.12.4
    ipc: private
    labels:
      homepage.group: "Media"
      homepage.name: "Lidarr"
      homepage.icon: "lidarr.png"
      homepage.href: "http://10.10.1.13:8686"
      homepage.description: "Music downloader"
      homepage.widget.fields: "['wanted', 'queued', 'artists']"
      homepage.widget.type: "lidarr"
      homepage.widget.url: "http://10.10.1.13:8686"
      homepage.widget.key: "${HOMEPAGE_LIDARR_API}"
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/Lidarr/Lidarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Lidarr"
      wud.display.icon: "sh-lidarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 8686:8686/tcp
    restart: unless-stopped
    volumes:
      - /Data/Music:/music
      - /opt/docker/mediarr/lidarr_config:/config
      - /Data/Unsorted:/downloads 
  iplayarr-redis:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['redis-server']
    container_name: iplayarr-redis
    entrypoint: ['docker-entrypoint.sh']
    hostname: iplayarr-redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    image: redis:8.0.2
    ipc: private
    labels:       
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/redis/redis/releases/tag/$${major}.$${minor}.$${patch}'
      wud.display.name: "Iplayarr Redis"
      wud.display.icon: "sh-iplayarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    restart: unless-stopped
    volumes:
      - /opt/docker/iplayarr/redis_data:/data
  iplayarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['npm','run','start']
    container_name: iplayarr
    entrypoint:
      - docker-entrypoint.sh
    environment:
      PUID: "1001"
      PGID: "100"
      API_KEY: "${IPLAYARR_API_KEY}"
      DOWNLOAD_DIR: "/mnt/media/!Complete"
      COMPLETE_DIR: "/mnt/media/!Incomplete"
      STORAGE_LOCATION: "/config"
      CACHE_LOCATION: "/data"
      REDIS_HOST: "iplayarr-redis"
      REDIS_PORT: "6379"
    hostname: iplayarr
    image: nikorag/iplayarr:0.7.3a
    ipc: private
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/Nikorag/iplayarr/releases/tag/$${major}.$${minor}.$${patch}'
      wud.display.name: "Iplayarr"
      wud.display.icon: "sh-iplayarr"
    networks:
      - mediarr
    ports:
      - 4404:4404/tcp
    restart: unless-stopped
    volumes:
      - /Data/Unsorted:/mnt/media
      - /opt/docker/mediarr/iplayarr_config:/config
      - /opt/docker/mediarr/iplayarr_data:/data
  cleanuperr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: cleanuperr
    environment:
      TZ: "${TZ}"
      TRIGGERS__QUEUECLEANER: "0 0/5 * * * ?'"
      TRIGGERS__CONTENTBLOCKER: "0 0/5 * * * ?"
      TRIGGERS__DOWNLOADCLEANER: "0 0 * * * ?"
      QUEUECLEANER__ENABLED: "true"
      QUEUECLEANER__RUNSEQUENTIALLY: "true"
      QUEUECLEANER__IMPORT_FAILED_MAX_STRIKES: "5"
      QUEUECLEANER__IMPORT_FAILED_IGNORE_PRIVATE: "false"
      QUEUECLEANER__IMPORT_FAILED_DELETE_PRIVATE: "false"
      QUEUECLEANER__STALLED_MAX_STRIKES: "5"
      QUEUECLEANER__STALLED_RESET_STRIKES_ON_PROGRESS: "false"
      QUEUECLEANER__STALLED_IGNORE_PRIVATE: "false"
      QUEUECLEANER__STALLED_DELETE_PRIVATE: "false"
      CONTENTBLOCKER__ENABLED: "true"
      CONTENTBLOCKER__IGNORE_PRIVATE: "false"
      CONTENTBLOCKER__DELETE_PRIVATE: "false"
      DOWNLOADCLEANER__ENABLED: "true"
      DOWNLOADCLEANER__DELETE_PRIVATE: "false"
      DOWNLOAD_CLIENT: "qBittorrent"
      QBITTORRENT__URL: "http://10.10.1.13:8008"
      QBITTORRENT__USERNAME: "${QBITTORRENT__USERNAME}"
      QBITTORRENT__PASSWORD: "${QBITTORRENT__PASSWORD}"
      DOWNLOADCLEANER__CATEGORIES__0__NAME: "sonarr"
      DOWNLOADCLEANER__CATEGORIES__0__MAX_RATIO: "0.1"
      DOWNLOADCLEANER__CATEGORIES__0__MIN_SEED_TIME: "0"
      DOWNLOADCLEANER__CATEGORIES__0__MAX_SEED_TIME: "10"
      DOWNLOADCLEANER__CATEGORIES__1__NAME: "radarr"
      DOWNLOADCLEANER__CATEGORIES__1__MAX_RATIO: "0.1"
      DOWNLOADCLEANER__CATEGORIES__1__MIN_SEED_TIME: "0"
      DOWNLOADCLEANER__CATEGORIES__1__MAX_SEED_TIME: "10"
      SONARR__ENABLED: "true"
      SONARR__SEARCHTYPE: "Episode"
      SONARR__BLOCK__TYPE: "blacklist"
      SONARR__BLOCK__PATH: "https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist"
      SONARR__INSTANCES__0__URL: "http://10.10.1.13:8989"
      SONARR__INSTANCES__0__APIKEY: "${SONARR__INSTANCES__0__APIKEY}"
      RADARR__ENABLED: "true"
      RADARR__BLOCK__TYPE: "blacklist"
      RADARR__BLOCK__PATH: "https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist"
      RADARR__INSTANCES__0__URL: "http://10.10.1.13:7878"
      RADARR__INSTANCES__0__APIKEY: "${RADARR__INSTANCES__0__APIKEY}"
      LIDARR__ENABLED: "true"
      LIDARR__BLOCK__TYPE: "blacklist"
      LIDARR__BLOCK__PATH: "https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist"
      LIDARR__INSTANCES__0__URL: "http://10.10.1.13:8686"
      LIDARR__INSTANCES__0__APIKEY: "${LIDARR__INSTANCES__0__APIKEY}"
    hostname: cleanuperr
    image: ghcr.io/cleanuparr/cleanuparr:2.0.2
    ipc: private
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/Cleanuparr/Cleanuparr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Cleanuperr"
      wud.display.icon: "sh-cleanuperr"
    networks:
      - mediarr
    restart: unless-stopped
  flaresolverr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ["/usr/local/bin/python","-u","/app/flaresolverr.py"]
    container_name: flaresolverr
    entrypoint: ["/usr/bin/dumb-init","--"]
    hostname: flareresolverr
    image: flaresolverr/flaresolverr:v3.3.25
    ipc: private
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/FlareSolverr/FlareSolverr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Flaresolverr"
      wud.display.icon: "sh-flaresolverr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 8191:8191/tcp
    restart: unless-stopped
    user: flaresolverr
  radarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: radarr
    entrypoint:
      - /init
    environment:
      TZ: "${TZ}"
      PUID: "1001"
      PGID: "100"
    hostname: radarr
    image: linuxserver/radarr:5.26.2
    ipc: private
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'hhttps://github.com/Radarr/Radarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Radarr"
      wud.display.icon: "sh-radarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 7878:7878/tcp
    restart: unless-stopped
    volumes:
      - /Data/Unsorted:/downloads
      - /Data/Movies:/movies
      - /Data/CartoonMovies:/cartoon_movies
      - /opt/docker/mediarr/radarr_config:/config
  sonarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: sonarr
    entrypoint:
      - /init
    environment:
      TZ: "${TZ}"
      PUID: "1001"
      PGID: "100"
    hostname: sonarr
    image: linuxserver/sonarr:4.0.15
    ipc: private
    labels:
      homepage.group: "Media"
      homepage.name: "Sonarr"
      homepage.icon: "sonarr.png"
      homepage.instance.internal.href: "http://10.10.1.13:8989"
      homepage.description: "TV Shows catalogue"
      homepage.widget.type: "sonarr"
      homepage.widget.url: "http://10.10.1.13:8989"
      homepage.widget.key: "${SONARR__INSTANCES__0__APIKEY}"
      homepage.widget.enableQueue: "true"
#      - "homepage.widget.fields=['books', 'authors', 'categories', 'series']"
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/sonarr/sonarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Sonarr"
      wud.display.icon: "sh-sonarr"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping", "https://google.com" ]
      interval: 30s
      retries: 10
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 8989:8989/tcp
    restart: unless-stopped
    volumes:
      - /Data/Cartoons:/cartoons
      - /Data/Anime:/anime
      - /opt/docker/mediarr/sonarr_config:/config
      - /Data/Unsorted:/downloads
      - /Data/TVShows:/tv
    
networks:
  mediarr:
    external: false