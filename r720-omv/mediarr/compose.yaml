services:
  #############################################################################
  # Gluetun VPN Gateway
  # All privacy-sensitive traffic is routed through this container.
  #############################################################################
  gluetun:
    image: qmcgaw/gluetun:v3.40.0
    container_name: gluetun
    hostname: gluetun
    restart: unless-stopped
    ipc: private
    networks:
      - mediarr
    ports:
      - 9696:9696/tcp # Prowlarr
      - 8191:8191/tcp # Flaresolverr
      - 8008:8008/tcp # Qbittorrent
    environment:
      TZ: "${TZ}"
      VPN_SERVICE_PROVIDER: "protonvpn"
      VPN_TYPE: "wireguard"
      WIREGUARD_PRIVATE_KEY: "${WIREGUARD_PRIVATE_KEY}"
      VPN_PORT_FORWARDING: "yes"
      PORT_FORWARD_ONLY: "yes"
      FIREWALL_OUTBOUND_SUBNETS: "10.10.0.0/16"
      VPN_PORT_FORWARDING_UP_COMMAND: /bin/sh -c 'wget -O- --retry-connrefused --post-data "json={\"listen_port\":{{PORTS}}}" http://127.0.0.1:8008/api/v2/app/setPreferences 2>&1'
    volumes:
      - /opt/docker/mediarr/gluetun_data:/gluetun
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - DAC_OVERRIDE
      - CHOWN
      - NET_ADMIN
    cap_drop:
      - ALL
    security_opt:
      - "no-new-privileges"
    healthcheck:
      test: ["CMD", "/gluetun-entrypoint", "healthcheck"]
      interval: 10s
      timeout: 60s
      start_period: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/qdm12/gluetun/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Gluetun"
      wud.display.icon: "sh-gluetun"

  #############################################################################
  # Qbittorrent (Networked via Gluetun)
  # Torrent client
  #############################################################################
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:5.1.2
    container_name: qbittorrent
    restart: unless-stopped
    ipc: private
    network_mode: service:gluetun
    environment:
      PUID: "${MEDIA_PUID}"
      PGID: "${MEDIA_PGID}"
      TZ: "${TZ}"
      WEBUI_PORT: "8008"
    volumes:
      - /opt/docker/mediarr/qbittorrent_config:/config
      - /Data/Unsorted:/data
    cap_add:
      - DAC_OVERRIDE
      - CHOWN
      - FOWNER
      - FSETID
      - SETUID
      - SETGID
    cap_drop:
      - ALL
    security_opt:
      - "no-new-privileges"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.display.icon: "sh-qbittorrent"
      wud.display.name: "QBittorrent"
      wud.link.template: 'https://github.com/qbittorrent/qBittorrent/releases/tag/release-$${major}.$${minor}.$${patch}'
      wud.tag.include: '^v?\d\.\d+\.\d+$$'
      wud.watch: "true"

  #############################################################################
  # Prowlarr (Networked via Gluetun)
  # Torrent index manager
  #############################################################################

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:2.1.5
    container_name: prowlarr
    restart: unless-stopped
    ipc: private
    network_mode: "service:gluetun"
    environment:
      PUID: "${MEDIA_PUID}"
      PGID: "${MEDIA_PGID}"
      TZ: "${TZ}"
    volumes:
      - /opt/docker/mediarr/prowlarr_config:/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9696/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      homepage.description: "Indexer Manager"
      homepage.group: "Media"
      homepage.href: "http://10.10.1.13:9696"
      homepage.icon: "prowlarr.svg"
      homepage.name: "Prowlarr"
      homepage.siteMonitor: "http://10.10.1.13:9696"
      homepage.widget.key: "{{HOMEPAGE_PROWLARR_API}}"
      homepage.widget.type: "prowlarr"
      homepage.widget.url: "http://10.10.1.13:9696"
      wud.display.icon: "sh-prowlarr"
      wud.display.name: "Prowlarr"
      wud.link.template: "https://github.com/Prowlarr/Prowlarr/releases/tag/v$${major}.$${minor}.$${patch}"
      wud.tag.include: "^v?\\d+\\.\\d+\\.\\d+$$"
      wud.watch: "true"
  #############################################################################
  # Recommendarr
  # AI powered media recommendation engine
  #############################################################################      
  recommendarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['sh','/start-unified.sh']
    container_name: recommendarr
    entrypoint:
      - docker-entrypoint.sh
    environment:
      PORT: "8282"
    hostname: recommendarr
    image: tannermiddleton/recommendarr:v1.4.4
    ipc: private
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/fingerthief/recommendarr/releases/tag/$${major}.$${minor}.$${patch}'
      wud.display.name: "Recommendarr"
      wud.display.icon: "sh-recommendarr"
    networks:
      - mediarr
    ports:
      - 8282:8282/tcp
    restart: unless-stopped
    volumes:
      - /opt/docker/mediarr/recommendarr_data:/app/server/data
  #############################################################################
  # Bazarr
  # Subtitle manager and downloader
  #############################################################################      
  bazarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: bazarr
    entrypoint:
      - /init
    environment:
      TZ: "${TZ}"
      PUID: "1001"
      PGID: "100"
    hostname: bazarr
    image: linuxserver/bazarr:1.5.3
    ipc: private
    labels:
      homepage.group: "Media"
      homepage.name: "Bazarr"
      homepage.icon: "bazarr.png"
      homepage.href: "http://10.10.1.13:6767"
      homepage.description: "Subtitle downloader"
      homepage.widget.fields: "['missingEpisodes', 'missingMovies']"
      homepage.widget.type: "bazarr"
      homepage.widget.url: "http://10.10.1.13:6767"
      homepage.widget.key: "${HOMEPAGE_BAZARR_API}"
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/morpheus65535/bazarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Bazarr"
      wud.display.icon: "sh-bazarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 6767:6767/tcp
    restart: unless-stopped
    volumes:
      - /opt/docker/mediarr/bazarr_config:/config
      - /Data/Movies:/movies
      - /Data/TVShows:/tv
  #############################################################################
  # Lidarr
  # Music collection manager
  #############################################################################
  lidarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: lidarr
    entrypoint:
      - /init
    environment:
      PUID: "1001"
      PGID: "100"
      TZ: "${TZ}"
    hostname: lidarr
    image: linuxserver/lidarr:2.14.5
    ipc: private
    labels:
      homepage.group: "Media"
      homepage.name: "Lidarr"
      homepage.icon: "lidarr.png"
      homepage.href: "http://10.10.1.13:8686"
      homepage.description: "Music downloader"
      homepage.widget.fields: "['wanted', 'queued', 'artists']"
      homepage.widget.type: "lidarr"
      homepage.widget.url: "http://10.10.1.13:8686"
      homepage.widget.key: "${HOMEPAGE_LIDARR_API}"
      wud.watch: "true"
      wud.tag.include: '^v?[0-7].\d+.\d+$$'
      wud.link.template: 'https://github.com/Lidarr/Lidarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Lidarr"
      wud.display.icon: "sh-lidarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 8686:8686/tcp
    restart: unless-stopped
    volumes:
      - /Data/Music:/music
      - /opt/docker/mediarr/lidarr_config:/config
      - /Data/Unsorted:/downloads
  #############################################################################
  # Iplayarr-Redis
  # Redis server for Iplayarr
  #############################################################################      
  iplayarr-redis:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['redis-server']
    container_name: iplayarr-redis
    entrypoint: ['docker-entrypoint.sh']
    hostname: iplayarr-redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    image: redis:8.2.2
    ipc: private
    labels:       
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/redis/redis/releases/tag/$${major}.$${minor}.$${patch}'
      wud.display.name: "Iplayarr Redis"
      wud.display.icon: "sh-iplayarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    restart: unless-stopped
    volumes:
      - /opt/docker/iplayarr/redis_data:/data
  #############################################################################
  # Iplayarr
  # BBC Iplayer downloader
  #############################################################################
  iplayarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ['npm','run','start']
    container_name: iplayarr
    entrypoint:
      - docker-entrypoint.sh
    environment:
      PUID: "1001"
      PGID: "100"
      API_KEY: "${IPLAYARR_API_KEY}"
      DOWNLOAD_DIR: "/mnt/media/!Complete"
      COMPLETE_DIR: "/mnt/media/!Incomplete"
      STORAGE_LOCATION: "/config"
      CACHE_LOCATION: "/data"
      REDIS_HOST: "iplayarr-redis"
      REDIS_PORT: "6379"
    hostname: iplayarr
    image: nikorag/iplayarr:0.11.2
    ipc: private
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/Nikorag/iplayarr/releases/tag/$${major}.$${minor}.$${patch}'
      wud.display.name: "Iplayarr"
      wud.display.icon: "sh-iplayarr"
    networks:
      - mediarr
    ports:
      - 4404:4404/tcp
    restart: unless-stopped
    volumes:
      - /Data/Unsorted:/mnt/media
      - /opt/docker/mediarr/iplayarr_config:/config
      - /opt/docker/mediarr/iplayarr_data:/data
  #############################################################################
  # Cleanuperr
  # Automatic cleanups of media collection
  #############################################################################
  cleanuperr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: cleanuperr
    environment:
      TZ: "${TZ}"
      TRIGGERS__QUEUECLEANER: "0 0/5 * * * ?'"
      TRIGGERS__CONTENTBLOCKER: "0 0/5 * * * ?"
      TRIGGERS__DOWNLOADCLEANER: "0 0 * * * ?"
      QUEUECLEANER__ENABLED: "true"
      QUEUECLEANER__RUNSEQUENTIALLY: "true"
      QUEUECLEANER__IMPORT_FAILED_MAX_STRIKES: "5"
      QUEUECLEANER__IMPORT_FAILED_IGNORE_PRIVATE: "false"
      QUEUECLEANER__IMPORT_FAILED_DELETE_PRIVATE: "false"
      QUEUECLEANER__STALLED_MAX_STRIKES: "5"
      QUEUECLEANER__STALLED_RESET_STRIKES_ON_PROGRESS: "false"
      QUEUECLEANER__STALLED_IGNORE_PRIVATE: "false"
      QUEUECLEANER__STALLED_DELETE_PRIVATE: "false"
      CONTENTBLOCKER__ENABLED: "true"
      CONTENTBLOCKER__IGNORE_PRIVATE: "false"
      CONTENTBLOCKER__DELETE_PRIVATE: "false"
      DOWNLOADCLEANER__ENABLED: "true"
      DOWNLOADCLEANER__DELETE_PRIVATE: "false"
      DOWNLOAD_CLIENT: "qBittorrent"
      QBITTORRENT__URL: "http://10.10.1.13:8008"
      QBITTORRENT__USERNAME: "${QBITTORRENT__USERNAME}"
      QBITTORRENT__PASSWORD: "${QBITTORRENT__PASSWORD}"
      DOWNLOADCLEANER__CATEGORIES__0__NAME: "sonarr"
      DOWNLOADCLEANER__CATEGORIES__0__MAX_RATIO: "0.1"
      DOWNLOADCLEANER__CATEGORIES__0__MIN_SEED_TIME: "0"
      DOWNLOADCLEANER__CATEGORIES__0__MAX_SEED_TIME: "10"
      DOWNLOADCLEANER__CATEGORIES__1__NAME: "radarr"
      DOWNLOADCLEANER__CATEGORIES__1__MAX_RATIO: "0.1"
      DOWNLOADCLEANER__CATEGORIES__1__MIN_SEED_TIME: "0"
      DOWNLOADCLEANER__CATEGORIES__1__MAX_SEED_TIME: "10"
      SONARR__ENABLED: "true"
      SONARR__SEARCHTYPE: "Episode"
      SONARR__BLOCK__TYPE: "blacklist"
      SONARR__BLOCK__PATH: "https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist"
      SONARR__INSTANCES__0__URL: "http://10.10.1.13:8989"
      SONARR__INSTANCES__0__APIKEY: "${SONARR__INSTANCES__0__APIKEY}"
      RADARR__ENABLED: "true"
      RADARR__BLOCK__TYPE: "blacklist"
      RADARR__BLOCK__PATH: "https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist"
      RADARR__INSTANCES__0__URL: "http://10.10.1.13:7878"
      RADARR__INSTANCES__0__APIKEY: "${RADARR__INSTANCES__0__APIKEY}"
      LIDARR__ENABLED: "true"
      LIDARR__BLOCK__TYPE: "blacklist"
      LIDARR__BLOCK__PATH: "https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist"
      LIDARR__INSTANCES__0__URL: "http://10.10.1.13:8686"
      LIDARR__INSTANCES__0__APIKEY: "${LIDARR__INSTANCES__0__APIKEY}"
    hostname: cleanuperr
    image: ghcr.io/cleanuparr/cleanuparr:2.4.0
    ipc: private
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/Cleanuparr/Cleanuparr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Cleanuperr"
      wud.display.icon: "sh-cleanuperr"
    networks:
      - mediarr
    restart: unless-stopped
  #############################################################################
  # Flareresolverr (Networked via Gluetun)
  # CAPTCHA resolver for Prowlarr
  #############################################################################    
  flaresolverr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    command: ["/usr/local/bin/python","-u","/app/flaresolverr.py"]
    container_name: flaresolverr
    entrypoint: ["/usr/bin/dumb-init","--"]
    image: flaresolverr/flaresolverr:v3.4.3
    ipc: private
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/FlareSolverr/FlareSolverr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Flaresolverr"
      wud.display.icon: "sh-flaresolverr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    network_mode: "service:gluetun"
    restart: unless-stopped
    user: flaresolverr
  #############################################################################
  # Radarr
  # Movie collection manager
  #############################################################################
  radarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: radarr
    entrypoint:
      - /init
    environment:
      TZ: "${TZ}"
      PUID: "1001"
      PGID: "100"
    hostname: radarr
    image: linuxserver/radarr:5.28.0
    ipc: private
    labels:
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'hhttps://github.com/Radarr/Radarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Radarr"
      wud.display.icon: "sh-radarr"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 7878:7878/tcp
    restart: unless-stopped
    volumes:
      - /Data/Unsorted:/downloads
      - /Data/Movies:/movies
      - /Data/CartoonMovies:/cartoon_movies
      - /opt/docker/mediarr/radarr_config:/config
  #############################################################################
  # Sonarr
  # TV series collection manager
  #############################################################################
  sonarr:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: sonarr
    entrypoint:
      - /init
    environment:
      TZ: "${TZ}"
      PUID: "1001"
      PGID: "100"
    hostname: sonarr
    image: linuxserver/sonarr:4.0.15
    ipc: private
    labels:
      homepage.group: "Media"
      homepage.name: "Sonarr"
      homepage.icon: "sonarr.png"
      homepage.instance.internal.href: "http://10.10.1.13:8989"
      homepage.description: "TV Shows catalogue"
      homepage.widget.type: "sonarr"
      homepage.widget.url: "http://10.10.1.13:8989"
      homepage.widget.key: "${SONARR__INSTANCES__0__APIKEY}"
      homepage.widget.enableQueue: "true"
#      - "homepage.widget.fields=['books', 'authors', 'categories', 'series']"
      wud.watch: "true"
      wud.tag.include: '^v?\d+\.\d+\.\d+$$'
      wud.link.template: 'https://github.com/sonarr/sonarr/releases/tag/v$${major}.$${minor}.$${patch}'
      wud.display.name: "Sonarr"
      wud.display.icon: "sh-sonarr"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping", "https://google.com" ]
      interval: 30s
      retries: 10
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - mediarr
    ports:
      - 8989:8989/tcp
    restart: unless-stopped
    volumes:
      - /Data/Cartoons:/cartoons
      - /Data/Anime:/anime
      - /opt/docker/mediarr/sonarr_config:/config
      - /Data/Unsorted:/downloads
      - /Data/TVShows:/tv
    
networks:
  mediarr:
    external: false