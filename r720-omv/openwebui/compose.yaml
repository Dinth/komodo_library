services:
  ollama:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    command: ['serve']
    container_name: ollama
    entrypoint: ['/bin/ollama']
    environment:
      OLLAMA_HOST: "0.0.0.0"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
      NVIDIA_VISIBLE_DEVICES: "all"
      OLLAMA_NUM_PARALLEL: "2"
      OLLAMA_MAX_LOADED_MODELS: "1"
      OLLAMA_KEEP_ALIVE: "24h"
      OLLAMA_DEBUG: "true"
      OLLAMA_FLASH_ATTENTION: "1"
      TZ: "${TZ}"
    hostname: ollama
    image: ollama/ollama:0.9.3
    ipc: private
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: '8G'
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [compute,utility]
    labels:
      wud.watch: "true"
      wud.watch.digest: "true"
      wud.display.name: "Ollama"
      wud.display.icon: "sh:ollama"
      wud.tag.include: '^v\d+\.\d+\.\d+$$'
      wud.link.template: "https://github.com/ollama/ollama/releases/tag/v$${major}.$${minor}.$${patch}"
    healthcheck:
      test: "ollama --version && ollama ps && bash -c 'cat < /dev/null > /dev/tcp/localhost/11434'|| exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - openwebui
    ports:
      - 11434:11434/tcp
    restart: unless-stopped
    volumes:
      - /opt/docker/openwebui/ollama_data:/root/.ollama
  openwebui-pipelines:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: openwebui-pipelines
    environment:
      PIPELINES_PORT: "9099"
      OLLAMA_BASE_URL: "http://ollama:11434"
      DATABASE_URL: "sqlite:///app/data/pipelines.db"  
    hostname: openwebui-pipelines
    image: ghcr.io/open-webui/pipelines:main
    ipc: private
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '2G'
    depends_on:
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9099/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - openwebui
    volumes:
      - /opt/docker/openwebui/openwebui-pipelines_data:/app/data
  openwebui:
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    container_name: openwebui
    environment:
      USE_OLLAMA_DOCKER: "true"
      PORT: "8080"
      OLLAMA_BASE_URL: "http://ollama:11434"
      PIPELINES_URL: "http://pipelines:9099"
      ENABLE_SIGNUP: "false"
      WEBUI_AUTH: "true"
      WEBUI_SECRET_KEY: "${OPENWEBUI_SECRET_KEY}"
      SCARF_NO_ANALYTICS: "true"
      DO_NOT_TRACK: "true"
      ANONYMIZED_TELEMETRY: "true"
      ENABLE_RAG_WEB_SEARCH: "true"
      RAG_WEB_SEARCH_ENGINE: "searxng"
      RAG_WEB_SEARCH_RESULT_COUNT: 3
      RAG_WEB_SEARCH_CONCURRENT_REQUESTS: 10
      SEARXNG_QUERY_URL: "https://search.${DOMAIN_NAME}/search?q=<query>"
    hostname: openwebui
    image: ghcr.io/open-webui/open-webui:main
    ipc: private
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      ollama:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    tmpfs:
      - /tmp
    networks:
      - openwebui
      - traefik
    ports:
      - 3311:8080/tcp
    labels:
      traefik.enable: "true"
      traefik.http.routers.openwebai.rule: "Host(`ai.${DOMAIN_NAME}`)"
      traefik.http.routers.openwebai.entrypoints: "websecure"
      traefik.http.routers.openwebai.tls: "true"
      traefik.http.routers.openwebai.tls.certresolver: "letsencrypt"
      traefik.http.routers.openwebai.tls.domains[0].main: "${DOMAIN_NAME}"
      traefik.http.routers.openwebai.tls.domains[0].sans: "*.${DOMAIN_NAME}"
      traefik.http.services.openwebai.loadbalancer.server.port: "8080"
      homepage.group: "Home"
      homepage.name: "OpenWebUI"
      homepage.icon: "sh-open-webui.png"
      homepage.instance.internal.href: "https://ai.${DOMAIN_NAME}"
      wud.watch: "true"
      wud.watch.digest: "true"
      wud.display.name: "OpenWebUI Server"
      wud.display.icon: "sh:open-webui"
      wud.tag.include: '^v\d+\.\d+\.\d+$'
      wud.link.template: "https://github.com/open-webui/open-webui/releases/tag/v$${major}.$${minor}.$${patch}"
    restart: unless-stopped
    user: 0:0
    volumes:
      - /opt/docker/openwebui/openwebui_data:/app/backend/data
    working_dir: /app/backend
networks:
  openwebui:
    name: openwebui
    driver: bridge
    external: false
  traefik:
    external: true