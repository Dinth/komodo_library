services:
  omnivore-redis:
    container_name: omnivore-redis
    image: redis:8.2.0
    cap_add:
      - AUDIT_WRITE
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - NET_RAW
      - SETFCAP
      - SETGID
      - SETPCAP
      - SETUID
      - SYS_CHROOT
    cap_drop:
      - ALL
    ipc: private
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    volumes:
      - /opt/docker/omnivore/omnivore-redis_data:/data
    networks:
      - omnivore
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      wud.watch: "true"
      wud.watch.digest: "true"
      wud.display.name: "Omnivore Redis"
      wud.display.icon: "sh-omnivore"
      wud.tag.include: '^$v\d+.\d+\.\d+$$'
      wud.link.template: 'https://github.com/redis/redis/releases/tag/$${major}.$${minor}.$${patch}'
  omnivore-postgres:
    image: docker.io/postgres:17-alpine
    ipc: private
    restart: unless-stopped
    healthcheck:
      test: pg_isready -q -t 2 -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 20s
      timeout: 30s
      interval: 10s
      retries: 5
    environment:
      POSTGRES_DB: "omnivore"
      POSTGRES_PASSWORD: "${OMNIVORE_POSTGRES_PASS}"
      POSTGRES_USER: "omnivore"
    deploy:
      resources:
        limits:
          memory: 200m
        reservations:
          memory: 50m
    volumes:
      - /opt/docker/omnivore/omnivore_postgres-data:/var/lib/postgresql/data
    networks:
      - omnivore

networks:
  omnivore:
    external: false
    name: omnivore
    driver: bridge
  traefik:
    external: true